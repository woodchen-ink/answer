name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - v*

env:
  IMAGE_NAME: answer
  DOCKER_HUB_USERNAME: woodchen
  DOCKER_HUB_REPO: answer

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'

      - name: Set GOPROXY environment variable
        run: |
          echo "GOPROXY=https://goproxy.io,direct" >> $GITHUB_ENV
          echo "GO111MODULE=on" >> $GITHUB_ENV

      - name: Install wire and mockgen
        run: |
          go install github.com/google/wire/cmd/wire@latest
          go install github.com/golang/mock/mockgen@v1.6.0
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Update go.mod and go.sum
        run: |
          go mod download
          go mod tidy

      - name: Generate wire files
        run: |
          wire ./cmd
          # Add other directories that need wire here, for example:
          # wire ./internal/service
          # wire ./internal/controller
          # etc.

      - name: Generate mock files
        run: go generate ./...

      - name: List generated files
        run: |
          find . -name "*_gen.go"
          find . -name "mock_*.go"

      - name: Upload generated files
        uses: actions/upload-artifact@v3
        with:
          name: generated-files
          path: .

  build:
  needs: generate
  runs-on: ubuntu-latest
  strategy:
    matrix:
      platform: [amd64, arm64]
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download generated files
      uses: actions/download-artifact@v3
      with:
        name: generated-files
        path: .

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-base git bash nodejs npm
        npm install -g pnpm@8.9.2

    - name: Build for ${{ matrix.platform }}
      env:
        GOOS: linux
        GOARCH: ${{ matrix.platform }}
        CGO_ENABLED: 0
        TAGS: "bindata timetzdata sqlite sqlite_unlock_notify"
      run: make build

    - name: Prepare artifact
      run: |
        mkdir -p artifact/usr/bin artifact/data/uploads artifact/data/i18n
        cp answer artifact/usr/bin/
        cp -r i18n/*.yaml artifact/data/i18n/
        tar -czvf artifact-${{ matrix.platform }}.tar.gz -C artifact .

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: artifact-${{ matrix.platform }}
        path: artifact-${{ matrix.platform }}.tar.gz


  push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Build and push Docker images
        run: |
          for platform in amd64 arm64; do
            docker buildx build --platform linux/${platform} \
              --build-arg ARTIFACT=artifacts/artifact-${platform}/artifact-${platform}.tar.gz \
              -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${platform}-latest \
              -f - . <<EOF
          FROM alpine
          ARG ARTIFACT
          ARG TIMEZONE=Asia/Shanghai
          RUN apk update && \
              apk --no-cache add bash ca-certificates curl dumb-init gettext openssh sqlite gnupg tzdata && \
              ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime && \
              echo "${TIMEZONE}" > /etc/timezone
          COPY ${ARTIFACT} /
          COPY script/entrypoint.sh /entrypoint.sh
          RUN tar -xzvf /${ARTIFACT##*/} -C / && \
              rm /${ARTIFACT##*/} && \
              chmod 755 /entrypoint.sh
          VOLUME /data
          EXPOSE 80
          ENTRYPOINT ["/entrypoint.sh"]
          EOF
            docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${platform}-latest
          done

      - name: Create and push multi-arch manifest
        run: |
          docker manifest create ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:amd64-latest \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:arm64-latest
          docker manifest push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: DOCKER_IMAGE,PROJECT_PATH
          script: |
            docker pull $DOCKER_IMAGE:latest
            cd $PROJECT_PATH
            rm -rf ./i18n
            docker compose down
            docker compose up -d
